/*
 * This file is generated by jOOQ.
 */
package al.bruno.task.organiser.tables;


import al.bruno.task.organiser.DefaultSchema;
import al.bruno.task.organiser.Keys;
import al.bruno.task.organiser.tables.records.TaskTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskType extends TableImpl<TaskTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>task_type</code>
     */
    public static final TaskType TASK_TYPE = new TaskType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskTypeRecord> getRecordType() {
        return TaskTypeRecord.class;
    }

    /**
     * The column <code>task_type._id</code>.
     */
    public final TableField<TaskTypeRecord, Integer> _ID = createField(DSL.name("_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>task_type._task_type</code>.
     */
    public final TableField<TaskTypeRecord, String> _TASK_TYPE = createField(DSL.name("_task_type"), SQLDataType.CLOB, this, "");

    private TaskType(Name alias, Table<TaskTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskType(Name alias, Table<TaskTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>task_type</code> table reference
     */
    public TaskType(String alias) {
        this(DSL.name(alias), TASK_TYPE);
    }

    /**
     * Create an aliased <code>task_type</code> table reference
     */
    public TaskType(Name alias) {
        this(alias, TASK_TYPE);
    }

    /**
     * Create a <code>task_type</code> table reference
     */
    public TaskType() {
        this(DSL.name("task_type"), null);
    }

    public <O extends Record> TaskType(Table<O> child, ForeignKey<O, TaskTypeRecord> key) {
        super(child, key, TASK_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TaskTypeRecord, Integer> getIdentity() {
        return (Identity<TaskTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskTypeRecord> getPrimaryKey() {
        return Keys.TASK_TYPE__;
    }

    @Override
    public TaskType as(String alias) {
        return new TaskType(DSL.name(alias), this);
    }

    @Override
    public TaskType as(Name alias) {
        return new TaskType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskType rename(String name) {
        return new TaskType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskType rename(Name name) {
        return new TaskType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
